# Static Assets
GET     /robots.txt                 controllers.Assets.at(path="/public", file = "robots.txt")
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /assets-versioned/*file     controllers.Assets.versioned(path="/public", file: Asset)
GET     /s3assets/images/*filename  kipsigman.play.mvc.S3Controller.image(filename)
GET     /s3assets/*filename         kipsigman.play.mvc.S3Controller.file(filename)

# JavaScript resources
GET     /resources/config.js        controllers.JavaScriptResourceController.configJs
GET     /resources/messages.js      controllers.JavaScriptResourceController.messagesJs
GET     /resources/routes.js        controllers.JavaScriptResourceController.routesJs

# Auth/User
GET     /auth/signIn                     controllers.UserController.signIn(successUrl: Option[String] ?= None)
POST    /auth/signIn                     controllers.UserController.signInPost
GET     /auth/signOut                    controllers.UserController.signOut
GET     /auth/signUp                     controllers.UserController.signUp(successUrl: Option[String] ?= None)
POST    /auth/signUp                     controllers.UserController.signUpPost
GET     /auth/user                       controllers.UserController.user

# Site pages accessible to anonymous visitors and all Users
GET     /                           controllers.SiteController.index
GET     /about                      controllers.SiteController.about
GET     /contact                    controllers.SiteController.contact
GET     /help                       controllers.SiteController.help
GET     /category/:category         controllers.SiteController.category(category:kipsigman.domain.entity.Category, pageIndex:Int ?= 0)

# Site Widgets (AJAX loaded)
GET     /widget/recentArticles            controllers.WidgetController.recentArticles(categoryOption:Option[kipsigman.domain.entity.Category], excludeIds:Seq[Int])
GET     /widget/trendingArticles          controllers.WidgetController.trendingArticles(excludeIds:Seq[Int])
GET     /widget/weather                   controllers.WidgetController.weather

# Articles
GET     /category/:category/:seoAlias         controllers.ArticleController.view(category:kipsigman.domain.entity.Category, seoAlias:String)
GET     /content/articles                     controllers.ArticleController.list
GET     /content/articles/create/:templateId  controllers.ArticleController.create(templateId:Int)
POST    /content/articles/create/:templateId  controllers.ArticleController.createPost(templateId:Int)
GET     /content/articles/:id/delete          controllers.ArticleController.delete(id:Int)
GET     /content/articles/:id/edit            controllers.ArticleController.edit(id:Int)
POST    /content/articles/:id/edit            controllers.ArticleController.editPost(id:Int)
GET     /content/articles/:id/own             controllers.ArticleController.own(id:Int)
GET     /content/articles/:id/preview         controllers.ArticleController.preview(id:Int)
GET     /content/articles/:id/saveStatus      controllers.ArticleController.saveStatus(id:Int, status:kipsigman.domain.entity.Status)
POST    /content/articles/tag                 controllers.ArticleController.saveTag

# Image editing
GET     /content/images/:id/dropzone          controllers.ImageController.imageDropzone(id:Int)

# Editor authorization
GET     /editor/templates                                   controllers.ArticleTemplateController.list
GET     /editor/templates/category/:category                controllers.ArticleTemplateController.listByCategory(category:kipsigman.domain.entity.Category, pageIndex:Int ?= 0)
GET     /editor/templates/create                            controllers.ArticleTemplateController.create
GET     /editor/templates/:id/edit                          controllers.ArticleTemplateController.edit(id:Int)
POST    /editor/templates                                   controllers.ArticleTemplateController.save
POST    /editor/templates/:contentId/images                 controllers.ArticleTemplateController.saveNewContentImage(contentId: Int)
POST    /editor/templates/:contentId/images/:imageId        controllers.ArticleTemplateController.saveContentImage(contentId: Int, imageId: Int)
POST    /editor/templates/:contentId/images/:imageId/delete controllers.ArticleTemplateController.deleteContentImage(contentId: Int, imageId: Int)

# Administrator authorization